bueno, aca vamos a empezar a hacer esto, esto , no es dificil, solo algo tedioso, por creo que estoy listo
lo que vamos a hacer es facil, es tonto y ineficiente empezar directamente con el alquiler de autos
asi que vamos a crear una proto app de juego , que use todas las herramientas que vamos a usar
y vamos a hacer que haga cosas parecidas a lo que se quiere en la app final, para luego, escribir 
sobre ella, y ya
primero, vamos a hacer un diagrama , de esos lindos, pero nada profesional, de juego
de lo que quiero para mi appli, luego, vamos a empezar a crear las capretas y seguimos, 
si vamos a hacer lo ultimo, vamos a hacerlo divertido
>>>QUE COSAS TIENE QUE TENER?
>>VER DIAGRAMA 
>>>que vamos a hacer primero?
primero vamos a hacer las paginas del server, y vamos a jugar con el en postman(mas facil imposible)
luego, cuando todo menos el renderado de la pagina este listo, continuemos con el front
>>bueno, ya tengo bastante control sobre el sql, pero aun me falta un par de cosas par empezar, vamos a 
escribir lo que falta aca, y luego , cuando terminemos, estamos listos para empezar a jugar con una base de datos de autos
>ya tengo el selector, no es necesario poner nada mas hay por el momento
>ya tengo una base de datos seleccionable, todavia falta ver si se puede modificar
>los servicios ni el selector de la base de datos no existen todavia, pero aun no son necesarios, hay que ahcerlos
>tenemos el el control un par de cosas que funcionan bien, vamos a nombrar lo que tenemos que hacer, 
>> selector de todo *LISTO*
>> selector de algo en particular *LISTO*
>> creacion de alguna/s fila/tabla/objeto *LISTO*
>> modificacion alguna/s fila/tabla/objeto *LISTO*
>> eliminacion de alguna/s fila/tabla/objeto *LISTO*
>> hacer que funcione como una api por medio de peticiones (acordate que, en caso de error,podes enviar un mensaje
o una señal de false y luego crear el mensaje de error) *LISTO*
>> finalizar la api y dejarla lista para trabajar
>> dejar la api lista y modularizada, lista para rellenar y trabajar, tambien arreglar el index
>>>hacer lo mismo que arriba, pero ahora con los autos, y hacerlos menos hardcodeados (a lo que puedan) *LISTO*
>> creacion de una base de datos nueva(opcional)
> con eso creo que alcanza, acordate que el control es solo eso, controla que se hace en la base de datos
> no tiene por que tener nada de logica de negocios, eso va en otro lado, asi que limitate a hacer lo de arriba y ya
> es hora de hacer el controlador de las dependancia y el de la base de datos
> primero vamos a hacer un controlador normal , con dic y rdsi, asi no mas, nada raro
> y luego vamos a hacer el selector de la base de datos(por que vamos a tener mas de 1)
>>lo que tenemos que hacer, es un control que envie las peticiones(o las controle) que requiera el
>>index, algo asi como un servicio, tambien tiene que hacer de interfas para el control de sql
>>para que, el control del sql , solo sepa hacer lo de arriba, sin importar la estructura, ni que
>>base de datos este usandose
>>>vamos a hacer un front basico, para ir complentando esto y tener una vista general de esto *LISTO*
>>el front funciona , por lo menos la peticion get, pero con eso es suficiente por el momento
>>>tenemos que ver como unimos a los usuarios con los autos, tenemos que hacer una base de datos crusada
>>>que diga quien tiene que auto, la patente, y por cuanto tiempo lo tienen que tener ,ect
>>tenemos que crear una base de datos de asignacion/transaccion/identificiacion, asi  poder hacer esto,
>> y en esta, decimos quien es el que alquila, que auto alquila, y por cuanto tiempo *LISTO*
>> ahora vamos a poner seciones y cokies a la aplicacion, acordate que las secciones van en el server
>> y las galletas en el cliente
>>> hay aque arreglar la base de datos de los autos, y podemos completar la api
>>hoy vamos a completar toda la api, y dejarla lista para trabajar facilmente
>> a la transaccion la dejamos para mas tarde, por ser algo especial
>> falta lo de eliminar y modificar la api todavia *LISTO*
>>API TOTALMENTE OPERATIVA


>>vamos activar y completar todo el control de la api, y cuando eso este listo, vamos a empezar el front final

>> vamos a hacer el front, vamos a hacer un html simple, con placeholder por todos lados, 
>> no vamos a tocar la api por ahora, vamos a hacer el esqueleto de la pagina y ya
>> idea sencilla, hacer 4 componentes, nav(menus),header,main y footer
>> idea, olcultar el body por 0.5 segundos para que no se vean los efectos feos
>> vamos a hacer todas las paginas ahora, los links y el login(sin funcionar), hoy tenemos que dejar
>> el html listo, estoy arto de esta shit
>> paginas
>> reservas, autos disponibles(catalogo), login, home,registro de user, registro de autos(para admin), default(pagina de error)
>> creo que es todo por ahora 
>> vamos a crear una funcion para crear sliders generales
>> Vamos a automatizar los links tambien, para que no halla que escribirlos
>> ya casi terminamos, hoy, vamos a hacer lo de las imagenes por el servidor, y , si se puede
>> las seciones
>> imagenes por servidor listas, pero falta hacer el slider general, y cargar todas las imagenes que vamos a usar
>> vamos a buscar todos los autos que necesitemos *Listo*, y vamos a dejarlo fijo(que tampoco es que se compren
>> autos todos los dias)*Listo*, ahora, vamos a hacer el slider general y dejemos fijas
>> las 6 categorias de autos *LISTO*
>> ahora, vamos a practicar las seciones y tenemos todo listo para el css final

>> ya podemos enviar lo que se quiera, y podemos leerlo tambien, y casi hacer lo que se quiera, 
>> pero, primero vamos a ver lo de los tokens y decimos *LISTO, no vale la pena*
>> guia de sessiones
>>> lo que vamos a hacer es simple, el programa oriinal, guarda una sesion en una base de datos , con una 
>>> id especial, esta es la id que vamos a mandar a la cookie, bueno, luego, con una funcion de ayuda
>>> vamos a verificar que esta es la misma que la enviada
>>> PERO, para esto, vamos a hacer que lo primero que vamos a hacer , es verificar la cookie en el front,
>>> como?, hacemos un reques a una pagina verificadora, si esta cookie existe, se envia una señal de true
>>> al front y creamos un estado de verificado en el front, y listo, si no existe, se manda un false
>>> esta cookie, va a tener 2 cosas, la id, y el nombre de usuario, nada mas, y con eso vamos a trabajar
>>> tambien hay que hacer el deslogin, para hacer esto, solo hay que buscar la id de la cookie, y borrala
>>> del server y ya, tambien hay que borrarla del front *COMPLETO*
>> ahora vamos a hacer 2 cosas, empesar el css final, y poner en nombre de usuario/estado del login *LISTO EL LOGIN*
>> y finalmente, el ccs, ahora si que si, todo funciona , y no hay problemas en nada mas :)

